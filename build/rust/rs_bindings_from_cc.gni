# Copyright 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/rust.gni")
import("//build/config/sysroot.gni")
import("//build/rust/mixed_static_library.gni")

# Template to generate and build Rust bindings for a set of C++ headers using
# Crubit's `rs_bindings_from_cc` tool.
#
# This template expands to a `mixed_static_library` named "<target>_rs_api" and
# containing the Rust side of the bindings (as well as internal C++ thunks
# needed to support the bindings).
#
# The generated out/.../gen/.../<target>_rs_api.rs is machine-generated, but
# should be fairly readable (inspecting it might be useful to discover the
# imported bindings and their shape).
#
# Parameters:
#
#   public_headers:
#     The .h files to generate bindings for.
#
#     Implementation note: This doesn't just take *all* the headers of the C++
#     target, because typically only a *subset* of headers provides the
#     *public* API that bindings are needed for.
#
#   TODO(crbug.com/1297592): Support dependencies in the generated bindings.
#   Tentative plan:
#   1) introduce `bindings_target` and use it A) in regular `deps` of
#      mixed_static_library and B) to build the crate name by appending
#      "_rs_api" suffix.
#   2) introduce `bindings_deps` and use it when gathering GN metadata.
#
# Usage example:
#
#   BUILD.gn:
#       import("//build/rust/rs_bindings_from_cc.gni")
#       import("//build/rust/rust_executable.gni")
#
#       rust_executable("my_target") {
#         crate_root = "main.rs"
#         sources = [ "main.rs" ]
#         deps = [ ":cpp_lib_rs_api" ]
#       ]
#
#       # Crubit's convention is to append "_rs_api" suffix to the target name
#       # when naming the generated Rust crate.
#       rs_bindings_from_cc("cpp_lib") {
#         public_headers = ["cpp_lib.h"]
#       }
#
#       source_set("cpp_lib") {
#         sources = [ "cpp_lib.h", ... ]
#       }
#
#   cpp_lib.h:
#     void TeleportGoats(int number_of_goats);
#
#   main.rs:
#     fn main() {
#       cpp_lib_rs_api::TeleportGoats(42);
#     }
#
template("rs_bindings_from_cc") {
  # Mandatory parameter: public_headers.
  assert(defined(invoker.public_headers),
         "Must specify the public C headers to make bindings for.")
  _rebased_public_headers = []
  foreach(hdr, invoker.public_headers) {
    _rebased_public_headers += [ rebase_path(hdr) ]
  }

  # Optional parameter: testonly.
  _testonly = false
  if (defined(invoker.testonly)) {
    _testonly = invoker.testonly
  }

  # Optional parameter: visibility.
  if (defined(invoker.visibility)) {
    _visibility = invoker.visibility
  }

  # Future parameters:
  _bindings_target = ":${target_name}"
  _bindings_deps = []

  # Various names and paths that are shared across multiple targets defined
  # in the template here.
  _base_target_name = get_label_info(_bindings_target, "name")
  _lib_target_name = "${_base_target_name}_rs_api"
  _gen_bindings_target_name = "${_lib_target_name}_gen_bindings"
  _gen_metadata_target_name = "${_lib_target_name}_gen_metadata"
  _metadata_target_name = "${_lib_target_name}_metadata"
  _metadata_path = "${target_gen_dir}/${_lib_target_name}_meta.json"
  _rs_out_path = "${target_gen_dir}/${_lib_target_name}.rs"
  _cc_out_path = "${target_gen_dir}/${_lib_target_name}_impl.cc"

  # Calculating the --targets_and_headers snippet for the *current* target
  # and putting it into GN's `metadata`.
  group(_metadata_target_name) {
    testonly = _testonly
    visibility = [ ":${_gen_metadata_target_name}" ]
    deps = []

    metadata = {
      # The data below corresponds to a single-target entry inside
      # `--targets_and_headers` cmdline argument of `rs_bindings_from_cc`.
      crubit_target_and_headers = [
        {
          t = _base_target_name
          h = _rebased_public_headers
        },
      ]
    }
  }

  # Gathering --targets-and-headers data from *all* transitive dependencies and
  # putting them into the file at `_metadata_path`.
  generated_file(_gen_metadata_target_name) {
    testonly = _testonly
    visibility = [ ":${_gen_bindings_target_name}" ]

    deps = [ ":${_metadata_target_name}" ]
    deps += _bindings_deps

    testonly = _testonly
    outputs = [ _metadata_path ]
    output_conversion = "json"
    data_keys = [ "crubit_target_and_headers" ]

    # TODO(https://crbug.com/1329611): Use `walk_keys` to limit how deep the
    # transitive dependency goes.  Crubit doesn't care about all the `public_deps`
    # - for example if target1.h re-exports a function from target2.h that uses
    # only built-in C types as parameter types and return type, then Crubit doesn't
    # need to know about target2.h when generating bindings for target1.h.  Crubit
    # only needs to know about target2.h if bindings for target1.h need to expose
    # types that get their bindings from target2.h.
  }

  # Exposing the generated Rust bindings.
  mixed_static_library(_lib_target_name) {
    testonly = _testonly
    if (defined(_visibility)) {
      visibility = _visibility
    }

    sources = [ _cc_out_path ]
    deps = _bindings_deps
    deps += [
      ":${_gen_bindings_target_name}",
      _bindings_target,

      # TODO(crbug.com/1297592): Declare the dependencies (the generated
      # ..._rs_api_impl.cc file #includes headers like
      # "third_party/crubit/rs_bindings_from_cc/support/offsetof.h"
      # without telling GN about it...).
      # See also `deps_for_generated_cc_file` in `crubit/rs_bindings_from_cc/BUILD`.
      #"//third_party/crubit:rs_api_impl_support/TODO",
    ]

    rs_sources = [ _rs_out_path ]
    rs_crate_name = _lib_target_name
    rs_crate_root = _rs_out_path
    rs_deps = _bindings_deps
    rs_deps += [
      ":${_gen_bindings_target_name}",
      # TODO(crbug.com/1297592): Add required dependencies (the generated bindings will
      # depend on these extra crates if the generated bindings cover a C++ struct).
      # See also `deps_for_generated_rs_file` in `crubit/rs_bindings_from_cc/BUILD`.
      #"//third_party/rust/memoffset/v0_6:TODO",
      #"//third_party/rust/static_assertions/v1:TODO",
    ]
  }

  # Invoking Crubit's `rs_bindings_from_cc` tool to generate Rust bindings.
  action(_gen_bindings_target_name) {
    testonly = _testonly
    if (defined(_visibility)) {
      visibility = _visibility
    }

    script = "//build/rust/run_rs_bindings_from_cc.py"
    inputs = [ "//third_party/rust-toolchain/bin/rs_bindings_from_cc" ]
    sources = invoker.public_headers
    outputs = [
      _rs_out_path,
      _cc_out_path,
    ]

    deps = [ ":${_gen_metadata_target_name}" ]
    args = [
      # Target-specific outputs:
      "--rs_out",
      rebase_path(_rs_out_path),
      "--cc_out",
      rebase_path(_cc_out_path),

      # Target-specific inputs:
      "--public_headers",
      string_join(",", _rebased_public_headers),
      "--targets_and_headers_from_gn",
      rebase_path(_metadata_path),
    ]

    # Several important compiler flags come from default_compiler_configs
    configs = default_compiler_configs
    if (defined(invoker.configs)) {
      configs += invoker.configs
    }
    args += [
      "--",
      "{{defines}}",
      "{{include_dirs}}",
      "{{cflags}}",

      # This path contains important C headers (e.g. stddef.h) and {{cflags}}
      # does not include it. Normally this path is implicitly added by clang but
      # it does not happen for libclang.
      #
      # Add it last so includes from deps and configs take precedence.
      "-isystem" + rebase_path(
              clang_base_path + "/lib/clang/" + clang_version + "/include",
              root_build_dir),

      # Passes C comments through as rustdoc attributes.
      "-fparse-all-comments",
    ]
  }
}
